--- a/feeds/luci/modules/luci-base/luasrc/model/network.lua
+++ b/feeds/luci/modules/luci-base/luasrc/model/network.lua
@@ -1,8 +1,8 @@
 -- Copyright 2009-2015 Jo-Philipp Wich <jow@openwrt.org>
 -- Licensed to the public under the Apache License 2.0.
 
-local type, next, pairs, ipairs, loadfile, table
-	= type, next, pairs, ipairs, loadfile, table
+local type, next, pairs, ipairs, loadfile, table, select
+	= type, next, pairs, ipairs, loadfile, table, select
 
 local tonumber, tostring, math = tonumber, tostring, math
 
@@ -16,12 +16,13 @@
 local dsp = require "luci.dispatcher"
 local uci = require "luci.model.uci"
 local lng = require "luci.i18n"
+local jsc = require "luci.jsonc"
 
 module "luci.model.network"
 
 
 IFACE_PATTERNS_VIRTUAL  = { }
-IFACE_PATTERNS_IGNORE   = { "^wmaster%d", "^wifi%d", "^hwsim%d", "^imq%d", "^ifb%d", "^mon%.wlan%d", "^sit%d", "^gre%d", "^lo$" }
+IFACE_PATTERNS_IGNORE   = { "^wmaster%d", "^wifi%d", "^hwsim%d", "^imq%d", "^ifb%d", "^mon%.wlan%d", "^sit%d", "^gre%d", "^gretap%d", "^ip6gre%d", "^ip6tnl%d", "^tunl%d", "^lo$" }
 IFACE_PATTERNS_WIRELESS = { "^wlan%d", "^wl%d", "^ath%d", "^%w+%.network%d" }
 
 
@@ -29,12 +30,12 @@
 
 local _protocols = { }
 
-local _interfaces, _bridge, _switch, _tunnel
+local _interfaces, _bridge, _switch, _tunnel, _swtopo
 local _ubusnetcache, _ubusdevcache, _ubuswificache
-local _uci_real, _uci_state
+local _uci
 
 function _filter(c, s, o, r)
-	local val = _uci_real:get(c, s, o)
+	local val = _uci:get(c, s, o)
 	if val then
 		local l = { }
 		if type(val) == "string" then
@@ -44,9 +45,9 @@
 				end
 			end
 			if #l > 0 then
-				_uci_real:set(c, s, o, table.concat(l, " "))
+				_uci:set(c, s, o, table.concat(l, " "))
 			else
-				_uci_real:delete(c, s, o)
+				_uci:delete(c, s, o)
 			end
 		elseif type(val) == "table" then
 			for _, val in ipairs(val) do
@@ -55,16 +56,16 @@
 				end
 			end
 			if #l > 0 then
-				_uci_real:set(c, s, o, l)
+				_uci:set(c, s, o, l)
 			else
-				_uci_real:delete(c, s, o)
+				_uci:delete(c, s, o)
 			end
 		end
 	end
 end
 
 function _append(c, s, o, a)
-	local val = _uci_real:get(c, s, o) or ""
+	local val = _uci:get(c, s, o) or ""
 	if type(val) == "string" then
 		local l = { }
 		for val in val:gmatch("%S+") do
@@ -73,7 +74,7 @@
 			end
 		end
 		l[#l+1] = a
-		_uci_real:set(c, s, o, table.concat(l, " "))
+		_uci:set(c, s, o, table.concat(l, " "))
 	elseif type(val) == "table" then
 		local l = { }
 		for _, val in ipairs(val) do
@@ -82,7 +83,7 @@
 			end
 		end
 		l[#l+1] = a
-		_uci_real:set(c, s, o, l)
+		_uci:set(c, s, o, l)
 	end
 end
 
@@ -95,15 +96,15 @@
 end
 
 function _get(c, s, o)
-	return _uci_real:get(c, s, o)
+	return _uci:get(c, s, o)
 end
 
 function _set(c, s, o, v)
 	if v ~= nil then
 		if type(v) == "boolean" then v = v and "1" or "0" end
-		return _uci_real:set(c, s, o, v)
+		return _uci:set(c, s, o, v)
 	else
-		return _uci_real:delete(c, s, o)
+		return _uci:delete(c, s, o)
 	end
 end
 
@@ -127,7 +128,7 @@
 		for radio, radiostate in pairs(_ubuswificache) do
 			for ifc, ifcstate in pairs(radiostate.interfaces) do
 				if ifcstate.section and ifcstate.section:sub(1, 1) == '@' then
-					local s = _uci_real:get_all('wireless.%s' % ifcstate.section)
+					local s = _uci:get_all('wireless.%s' % ifcstate.section)
 					if s then
 						ifcstate.section = s['.name']
 					end
@@ -153,7 +154,7 @@
 		local num = 0
 
 		ifnidx = tonumber(ifnidx)
-		_uci_real:foreach("wireless", "wifi-iface",
+		_uci:foreach("wireless", "wifi-iface",
 			function(s)
 				if s.device == radio then
 					num = num + 1
@@ -166,20 +167,9 @@
 
 		return sid
 
-	-- looks like wifi, try to locate the section via state vars
+	-- looks like wifi, try to locate the section via ubus state
 	elseif _wifi_iface(ifn) then
-		local sid = _wifi_state("ifname", ifn, "section")
-		if not sid then
-			_uci_state:foreach("wireless", "wifi-iface",
-				function(s)
-					if s.ifname == ifn then
-						sid = s['.name']
-						return false
-					end
-				end)
-		end
-
-		return sid
+		return _wifi_state("ifname", ifn, "section")
 	end
 end
 
@@ -200,18 +190,17 @@
 			return true
 		end
 	end
-	return _iface_virtual(x)
+	return false
 end
 
-
 function init(cursor)
-	_uci_real  = cursor or _uci_real or uci.cursor()
-	_uci_state = _uci_real:substate()
+	_uci = cursor or _uci or uci.cursor()
 
 	_interfaces = { }
 	_bridge     = { }
 	_switch     = { }
 	_tunnel     = { }
+	_swtopo     = { }
 
 	_ubusnetcache  = { }
 	_ubusdevcache  = { }
@@ -221,13 +210,12 @@
 	local n, i
 	for n, i in ipairs(nxo.getifaddrs()) do
 		local name = i.name:match("[^:]+")
-		local prnt = name:match("^([^%.]+)%.")
 
 		if _iface_virtual(name) then
 			_tunnel[name] = true
 		end
 
-		if _tunnel[name] or not _iface_ignore(name) then
+		if _tunnel[name] or not (_iface_ignore(name) or _iface_virtual(name)) then
 			_interfaces[name] = _interfaces[name] or {
 				idx      = i.ifindex or n,
 				name     = name,
@@ -237,11 +225,6 @@
 				ip6addrs = { }
 			}
 
-			if prnt then
-				_switch[name] = true
-				_switch[prnt] = true
-			end
-
 			if i.family == "packet" then
 				_interfaces[name].flags   = i.flags
 				_interfaces[name].stats   = i.data
@@ -277,17 +260,90 @@
 		end
 	end
 
+	-- read switch topology
+	local boardinfo = jsc.parse(nfs.readfile("/etc/board.json") or "")
+	if type(boardinfo) == "table" and type(boardinfo.switch) == "table" then
+		local switch, layout
+		for switch, layout in pairs(boardinfo.switch) do
+			if type(layout) == "table" and type(layout.ports) == "table" then
+				local _, port
+				local ports = { }
+				local nports = { }
+				local netdevs = { }
+
+				for _, port in ipairs(layout.ports) do
+					if type(port) == "table" and
+					   type(port.num) == "number" and
+					   (type(port.role) == "string" or
+					    type(port.device) == "string")
+					then
+						local spec = {
+							num    = port.num,
+							role   = port.role or "cpu",
+							index  = port.index or port.num
+						}
+
+						if port.device then
+							spec.device = port.device
+							spec.tagged = port.need_tag
+							netdevs[tostring(port.num)] = port.device
+						end
+
+						ports[#ports+1] = spec
+
+						if port.role then
+							nports[port.role] = (nports[port.role] or 0) + 1
+						end
+					end
+				end
+
+				table.sort(ports, function(a, b)
+					if a.role ~= b.role then
+						return (a.role < b.role)
+					end
+
+					return (a.index < b.index)
+				end)
+
+				local pnum, role
+				for _, port in ipairs(ports) do
+					if port.role ~= role then
+						role = port.role
+						pnum = 1
+					end
+
+					if role == "cpu" then
+						port.label = "CPU (%s)" % port.device
+					elseif nports[role] > 1 then
+						port.label = "%s %d" %{ role:upper(), pnum }
+						pnum = pnum + 1
+					else
+						port.label = role:upper()
+					end
+
+					port.role = nil
+					port.index = nil
+				end
+
+				_swtopo[switch] = {
+					ports = ports,
+					netdevs = netdevs
+				}
+			end
+		end
+	end
+
 	return _M
 end
 
 function save(self, ...)
-	_uci_real:save(...)
-	_uci_real:load(...)
+	_uci:save(...)
+	_uci:load(...)
 end
 
 function commit(self, ...)
-	_uci_real:commit(...)
-	_uci_real:load(...)
+	_uci:commit(...)
+	_uci:load(...)
 end
 
 function ifnameof(self, x)
@@ -345,7 +401,7 @@
 function add_network(self, n, options)
 	local oldnet = self:get_network(n)
 	if n and #n > 0 and n:match("^[a-zA-Z0-9_]+$") and not oldnet then
-		if _uci_real:section("network", "interface", n, options) then
+		if _uci:section("network", "interface", n, options) then
 			return network(n)
 		end
 	elseif oldnet and oldnet:is_empty() then
@@ -360,7 +416,7 @@
 end
 
 function get_network(self, n)
-	if n and _uci_real:get("network", n) == "interface" then
+	if n and _uci:get("network", n) == "interface" then
 		return network(n)
 	end
 end
@@ -369,7 +425,7 @@
 	local nets = { }
 	local nls = { }
 
-	_uci_real:foreach("network", "interface",
+	_uci:foreach("network", "interface",
 		function(s)
 			nls[s['.name']] = network(s['.name'])
 		end)
@@ -383,18 +439,18 @@
 end
 
 function del_network(self, n)
-	local r = _uci_real:delete("network", n)
+	local r = _uci:delete("network", n)
 	if r then
-		_uci_real:delete_all("network", "alias",
+		_uci:delete_all("network", "alias",
 			function(s) return (s.interface == n) end)
 
-		_uci_real:delete_all("network", "route",
+		_uci:delete_all("network", "route",
 			function(s) return (s.interface == n) end)
 
-		_uci_real:delete_all("network", "route6",
+		_uci:delete_all("network", "route6",
 			function(s) return (s.interface == n) end)
 
-		_uci_real:foreach("wireless", "wifi-iface",
+		_uci:foreach("wireless", "wifi-iface",
 			function(s)
 				local net
 				local rest = { }
@@ -404,10 +460,10 @@
 					end
 				end
 				if #rest > 0 then
-					_uci_real:set("wireless", s['.name'], "network",
+					_uci:set("wireless", s['.name'], "network",
 					              table.concat(rest, " "))
 				else
-					_uci_real:delete("wireless", s['.name'], "network")
+					_uci:delete("wireless", s['.name'], "network")
 				end
 			end)
 	end
@@ -417,31 +473,31 @@
 function rename_network(self, old, new)
 	local r
 	if new and #new > 0 and new:match("^[a-zA-Z0-9_]+$") and not self:get_network(new) then
-		r = _uci_real:section("network", "interface", new, _uci_real:get_all("network", old))
+		r = _uci:section("network", "interface", new, _uci:get_all("network", old))
 
 		if r then
-			_uci_real:foreach("network", "alias",
+			_uci:foreach("network", "alias",
 				function(s)
 					if s.interface == old then
-						_uci_real:set("network", s['.name'], "interface", new)
+						_uci:set("network", s['.name'], "interface", new)
 					end
 				end)
 
-			_uci_real:foreach("network", "route",
+			_uci:foreach("network", "route",
 				function(s)
 					if s.interface == old then
-						_uci_real:set("network", s['.name'], "interface", new)
+						_uci:set("network", s['.name'], "interface", new)
 					end
 				end)
 
-			_uci_real:foreach("network", "route6",
+			_uci:foreach("network", "route6",
 				function(s)
 					if s.interface == old then
-						_uci_real:set("network", s['.name'], "interface", new)
+						_uci:set("network", s['.name'], "interface", new)
 					end
 				end)
 
-			_uci_real:foreach("wireless", "wifi-iface",
+			_uci:foreach("wireless", "wifi-iface",
 				function(s)
 					local net
 					local list = { }
@@ -453,12 +509,12 @@
 						end
 					end
 					if #list > 0 then
-						_uci_real:set("wireless", s['.name'], "network",
+						_uci:set("wireless", s['.name'], "network",
 						              table.concat(list, " "))
 					end
 				end)
 
-			_uci_real:delete("network", old)
+			_uci:delete("network", old)
 		end
 	end
 	return r or false
@@ -470,7 +526,7 @@
 	else
 		local ifc
 		local num = { }
-		_uci_real:foreach("wireless", "wifi-iface",
+		_uci:foreach("wireless", "wifi-iface",
 			function(s)
 				if s.device then
 					num[s.device] = num[s.device] and num[s.device] + 1 or 1
@@ -488,58 +544,53 @@
 function get_interfaces(self)
 	local iface
 	local ifaces = { }
-	local seen = { }
 	local nfs = { }
-	local baseof = { }
 
 	-- find normal interfaces
-	_uci_real:foreach("network", "interface",
+	_uci:foreach("network", "interface",
 		function(s)
 			for iface in utl.imatch(s.ifname) do
-				if not _iface_ignore(iface) and not _wifi_iface(iface) then
-					seen[iface] = true
+				if not _iface_ignore(iface) and not _iface_virtual(iface) and not _wifi_iface(iface) then
 					nfs[iface] = interface(iface)
 				end
 			end
 		end)
 
 	for iface in utl.kspairs(_interfaces) do
-		if not (seen[iface] or _iface_ignore(iface) or _wifi_iface(iface)) then
+		if not (nfs[iface] or _iface_ignore(iface) or _iface_virtual(iface) or _wifi_iface(iface)) then
 			nfs[iface] = interface(iface)
 		end
 	end
 
 	-- find vlan interfaces
-	_uci_real:foreach("network", "switch_vlan",
+	_uci:foreach("network", "switch_vlan",
 		function(s)
-			if not s.device then
+			if type(s.ports) ~= "string" or
+			   type(s.device) ~= "string" or
+			   type(_swtopo[s.device]) ~= "table"
+			then
 				return
 			end
 
-			local base = baseof[s.device]
-			if not base then
-				if not s.device:match("^eth%d") then
-					local l
-					for l in utl.execi("swconfig dev %q help 2>/dev/null" % s.device) do
-						if not base then
-							base = l:match("^%w+: (%w+)")
-						end
+			local pnum, ptag
+			for pnum, ptag in s.ports:gmatch("(%d+)([tu]?)") do
+				local netdev = _swtopo[s.device].netdevs[pnum]
+				if netdev then
+					if not nfs[netdev] then
+						nfs[netdev] = interface(netdev)
 					end
-					if not base or not base:match("^eth%d") then
-						base = "eth0"
-					end
-				else
-					base = s.device
-				end
-				baseof[s.device] = base
-			end
+					_switch[netdev] = true
 
-			local vid = tonumber(s.vid or s.vlan)
-			if vid ~= nil and vid >= 0 and vid <= 4095 then
-				local iface = "%s.%d" %{ base, vid }
-				if not seen[iface] then
-					seen[iface] = true
-					nfs[iface] = interface(iface)
+					if ptag == "t" then
+						local vid = tonumber(s.vid or s.vlan)
+						if vid ~= nil and vid >= 0 and vid <= 4095 then
+							local iface = "%s.%d" %{ netdev, vid }
+							if not nfs[iface] then
+								nfs[iface] = interface(iface)
+							end
+							_switch[iface] = true
+						end
+					end
 				end
 			end
 		end)
@@ -551,7 +602,7 @@
 	-- find wifi interfaces
 	local num = { }
 	local wfs = { }
-	_uci_real:foreach("wireless", "wifi-iface",
+	_uci:foreach("wireless", "wifi-iface",
 		function(s)
 			if s.device then
 				num[s.device] = num[s.device] and num[s.device] + 1 or 1
@@ -572,7 +623,7 @@
 end
 
 function get_wifidev(self, dev)
-	if _uci_real:get("wireless", dev) == "wifi-device" then
+	if _uci:get("wireless", dev) == "wifi-device" then
 		return wifidev(dev)
 	end
 end
@@ -581,7 +632,7 @@
 	local devs = { }
 	local wfd  = { }
 
-	_uci_real:foreach("wireless", "wifi-device",
+	_uci:foreach("wireless", "wifi-device",
 		function(s) wfd[#wfd+1] = s['.name'] end)
 
 	local dev
@@ -601,9 +652,9 @@
 
 function add_wifinet(self, net, options)
 	if type(options) == "table" and options.device and
-		_uci_real:get("wireless", options.device) == "wifi-device"
+		_uci:get("wireless", options.device) == "wifi-device"
 	then
-		local wnet = _uci_real:section("wireless", "wifi-iface", nil, options)
+		local wnet = _uci:section("wireless", "wifi-iface", nil, options)
 		return wifinet(wnet)
 	end
 end
@@ -611,7 +662,7 @@
 function del_wifinet(self, net)
 	local wnet = _wifi_lookup(net)
 	if wnet then
-		_uci_real:delete("wireless", wnet)
+		_uci:delete("wireless", wnet)
 		return true
 	end
 	return false
@@ -662,8 +713,8 @@
 end
 
 function get_wannet(self)
-	local net = self:get_status_by_route("0.0.0.0", 0)
-	return net and network(net)
+	local net, stat = self:get_status_by_route("0.0.0.0", 0)
+	return net and network(net, stat.proto)
 end
 
 function get_wandev(self)
@@ -672,8 +723,8 @@
 end
 
 function get_wan6net(self)
-	local net = self:get_status_by_route("::", 0)
-	return net and network(net)
+	local net, stat = self:get_status_by_route("::", 0)
+	return net and network(net, stat.proto)
 end
 
 function get_wan6dev(self)
@@ -681,10 +732,14 @@
 	return stat and interface(stat.l3_device or stat.device)
 end
 
+function get_switch_topologies(self)
+	return _swtopo
+end
+
 
 function network(name, proto)
 	if name then
-		local p = proto or _uci_real:get("network", name, "proto")
+		local p = proto or _uci:get("network", name, "proto")
 		local c = p and _protocols[p] or protocol
 		return c(name)
 	end
@@ -695,7 +750,7 @@
 end
 
 function protocol._get(self, opt)
-	local v = _uci_real:get("network", self.sid, opt)
+	local v = _uci:get("network", self.sid, opt)
 	if type(v) == "table" then
 		return table.concat(v, " ")
 	end
@@ -730,7 +785,7 @@
 	end
 	if not ifname then
 		local num = { }
-		_uci_real:foreach("wireless", "wifi-iface",
+		_uci:foreach("wireless", "wifi-iface",
 			function(s)
 				if s.device then
 					num[s.device] = num[s.device]
@@ -779,17 +834,21 @@
 end
 
 function protocol.expires(self)
-	local a = tonumber(_uci_state:get("network", self.sid, "lease_acquired"))
-	local l = tonumber(_uci_state:get("network", self.sid, "lease_lifetime"))
-	if a and l then
-		l = l - (nxo.sysinfo().uptime - a)
-		return l > 0 and l or 0
+	local u = self:_ubus("uptime")
+	local d = self:_ubus("data")
+
+	if type(u) == "number" and type(d) == "table" and
+	   type(d.leasetime) == "number"
+	then
+		local r = (d.leasetime - (u % d.leasetime))
+		return r > 0 and r or 0
 	end
+
 	return -1
 end
 
 function protocol.metric(self)
-	return tonumber(_uci_state:get("network", self.sid, "metric")) or 0
+	return self:_ubus("metric") or 0
 end
 
 function protocol.ipaddr(self)
@@ -797,6 +856,20 @@
 	return addrs and #addrs > 0 and addrs[1].address
 end
 
+function protocol.ipaddrs(self)
+	local addrs = self:_ubus("ipv4-address")
+	local rv = { }
+
+	if type(addrs) == "table" then
+		local n, addr
+		for n, addr in ipairs(addrs) do
+			rv[#rv+1] = "%s/%d" %{ addr.address, addr.mask }
+		end
+	end
+
+	return rv
+end
+
 function protocol.netmask(self)
 	local addrs = self:_ubus("ipv4-address")
 	return addrs and #addrs > 0 and
@@ -835,6 +908,28 @@
 	end
 end
 
+function protocol.ip6addrs(self)
+	local addrs = self:_ubus("ipv6-address")
+	local rv = { }
+	local n, addr
+
+	if type(addrs) == "table" then
+		for n, addr in ipairs(addrs) do
+			rv[#rv+1] = "%s/%d" %{ addr.address, addr.mask }
+		end
+	end
+
+	addrs = self:_ubus("ipv6-prefix-assignment")
+
+	if type(addrs) == "table" then
+		for n, addr in ipairs(addrs) do
+			rv[#rv+1] = "%s1/%d" %{ addr.address, addr.mask }
+		end
+	end
+
+	return rv
+end
+
 function protocol.gw6addr(self)
 	local _, route
 	for _, route in ipairs(self:_ubus("route") or { }) do
@@ -855,6 +950,13 @@
 	return dns
 end
 
+function protocol.ip6prefix(self)
+	local prefix = self:_ubus("ipv6-prefix")
+	if prefix and #prefix > 0 then
+		return "%s/%d" %{ prefix[1].address, prefix[1].mask }
+	end
+end
+
 function protocol.is_bridge(self)
 	return (not self:is_virtual() and self:type() == "bridge")
 end
@@ -885,7 +987,7 @@
 			rv = false
 		end
 
-		_uci_real:foreach("wireless", "wifi-iface",
+		_uci:foreach("wireless", "wifi-iface",
 			function(s)
 				local n
 				for n in utl.imatch(s.network) do
@@ -937,12 +1039,12 @@
 	else
 		local ifn = nil
 		local num = { }
-		for ifn in utl.imatch(_uci_real:get("network", self.sid, "ifname")) do
+		for ifn in utl.imatch(_uci:get("network", self.sid, "ifname")) do
 			ifn = ifn:match("^[^:/]+")
 			return ifn and interface(ifn, self)
 		end
 		ifn = nil
-		_uci_real:foreach("wireless", "wifi-iface",
+		_uci:foreach("wireless", "wifi-iface",
 			function(s)
 				if s.device then
 					num[s.device] = num[s.device] and num[s.device] + 1 or 1
@@ -977,7 +1079,7 @@
 
 		local num = { }
 		local wfs = { }
-		_uci_real:foreach("wireless", "wifi-iface",
+		_uci:foreach("wireless", "wifi-iface",
 			function(s)
 				if s.device then
 					num[s.device] = num[s.device] and num[s.device] + 1 or 1
@@ -1020,7 +1122,7 @@
 		local wif = _wifi_lookup(ifname)
 		if wif then
 			local n
-			for n in utl.imatch(_uci_real:get("wireless", wif, "network")) do
+			for n in utl.imatch(_uci:get("wireless", wif, "network")) do
 				if n == self.sid then
 					return true
 				end
@@ -1066,7 +1168,8 @@
 end
 
 function interface.mac(self)
-	return (self:_ubus("macaddr") or "00:00:00:00:00:00"):upper()
+	local mac = self:_ubus("macaddr")
+	return mac and mac:upper()
 end
 
 function interface.ipaddrs(self)
@@ -1095,10 +1198,7 @@
 
 function interface.shortname(self)
 	if self.wif then
-		return "%s %q" %{
-			self.wif:active_mode(),
-			self.wif:active_ssid() or self.wif:active_bssid()
-		}
+		return self.wif:shortname()
 	else
 		return self.ifname
 	end
@@ -1109,7 +1209,7 @@
 		return "%s: %s %q" %{
 			lng.translate("Wireless Network"),
 			self.wif:active_mode(),
-			self.wif:active_ssid() or self.wif:active_bssid()
+			self.wif:active_ssid() or self.wif:active_bssid() or self.wif:id()
 		}
 	else
 		return "%s: %q" %{ self:get_type_i18n(), self:name() }
@@ -1125,7 +1225,11 @@
 	elseif x == "switch" then
 		return lng.translate("Ethernet Switch")
 	elseif x == "vlan" then
-		return lng.translate("VLAN Interface")
+		if _switch[self.ifname] then
+			return lng.translate("Switch VLAN")
+		else
+			return lng.translate("Software VLAN")
+		end
 	elseif x == "tunnel" then
 		return lng.translate("Tunnel Interface")
 	else
@@ -1278,22 +1382,11 @@
 		return (_ubuswificache[self.sid].up == true)
 	end
 
-	local up = false
-	_uci_state:foreach("wireless", "wifi-iface",
-		function(s)
-			if s.device == self.sid then
-				if s.up == "1" then
-					up = true
-					return false
-				end
-			end
-		end)
-
-	return up
+	return false
 end
 
 function wifidev.get_wifinet(self, net)
-	if _uci_real:get("wireless", net) == "wifi-iface" then
+	if _uci:get("wireless", net) == "wifi-iface" then
 		return wifinet(net)
 	else
 		local wnet = _wifi_lookup(net)
@@ -1306,7 +1399,7 @@
 function wifidev.get_wifinets(self)
 	local nets = { }
 
-	_uci_real:foreach("wireless", "wifi-iface",
+	_uci:foreach("wireless", "wifi-iface",
 		function(s)
 			if s.device == self.sid then
 				nets[#nets+1] = wifinet(s['.name'])
@@ -1320,7 +1413,7 @@
 	options = options or { }
 	options.device = self.sid
 
-	local wnet = _uci_real:section("wireless", "wifi-iface", nil, options)
+	local wnet = _uci:section("wireless", "wifi-iface", nil, options)
 	if wnet then
 		return wifinet(wnet, options)
 	end
@@ -1329,12 +1422,12 @@
 function wifidev.del_wifinet(self, net)
 	if utl.instanceof(net, wifinet) then
 		net = net.sid
-	elseif _uci_real:get("wireless", net) ~= "wifi-iface" then
+	elseif _uci:get("wireless", net) ~= "wifi-iface" then
 		net = _wifi_lookup(net)
 	end
 
-	if net and _uci_real:get("wireless", net, "device") == self.sid then
-		_uci_real:delete("wireless", net)
+	if net and _uci:get("wireless", net, "device") == self.sid then
+		_uci:delete("wireless", net)
 		return true
 	end
 
@@ -1347,26 +1440,58 @@
 function wifinet.__init__(self, net, data)
 	self.sid = net
 
+	local n = 0
 	local num = { }
-	local netid
-	_uci_real:foreach("wireless", "wifi-iface",
+	local netid, sid
+	_uci:foreach("wireless", "wifi-iface",
 		function(s)
+			n = n + 1
 			if s.device then
 				num[s.device] = num[s.device] and num[s.device] + 1 or 1
 				if s['.name'] == self.sid then
+					sid = "@wifi-iface[%d]" % n
 					netid = "%s.network%d" %{ s.device, num[s.device] }
 					return false
 				end
 			end
 		end)
 
+	if sid then
+		local _, k, r, i
+		for k, r in pairs(_ubuswificache) do
+			if type(r) == "table" and
+			   type(r.interfaces) == "table"
+			then
+				for _, i in ipairs(r.interfaces) do
+					if type(i) == "table" and i.section == sid then
+						self._ubusdata = {
+							radio = k,
+							dev = r,
+							net = i
+						}
+					end
+				end
+			end
+		end
+	end
+
 	local dev = _wifi_state("section", self.sid, "ifname") or netid
 
 	self.netid  = netid
 	self.wdev   = dev
 	self.iwinfo = dev and sys.wifi.getiwinfo(dev) or { }
-	self.iwdata = data or _uci_state:get_all("wireless", self.sid) or
-		_uci_real:get_all("wireless", self.sid) or { }
+end
+
+function wifinet.ubus(self, ...)
+	local n, v = self._ubusdata
+	for n = 1, select('#', ...) do
+		if type(v) == "table" then
+			v = v[select(n, ...)]
+		else
+			return nil
+		end
+	end
+	return v
 end
 
 function wifinet.get(self, opt)
@@ -1378,19 +1503,23 @@
 end
 
 function wifinet.mode(self)
-	return _uci_state:get("wireless", self.sid, "mode") or "ap"
+	return self:ubus("net", "config", "mode") or self:get("mode") or "ap"
 end
 
 function wifinet.ssid(self)
-	return _uci_state:get("wireless", self.sid, "ssid")
+	return self:ubus("net", "config", "ssid") or self:get("ssid")
 end
 
 function wifinet.bssid(self)
-	return _uci_state:get("wireless", self.sid, "bssid")
+	return self:ubus("net", "config", "bssid") or self:get("bssid")
 end
 
 function wifinet.network(self)
-	return _uci_state:get("wifinet", self.sid, "network")
+	local net, networks = nil, { }
+	for net in utl.imatch(self:ubus("net", "config", "network") or self:get("network")) do
+		networks[#networks+1] = net
+	end
+	return networks
 end
 
 function wifinet.id(self)
@@ -1402,7 +1531,7 @@
 end
 
 function wifinet.ifname(self)
-	local ifname = self.iwinfo.ifname
+	local ifname = self:ubus("net", "ifname") or self.iwinfo.ifname
 	if not ifname or ifname:match("^wifi%d") or ifname:match("^radio%d") then
 		ifname = self.wdev
 	end
@@ -1410,9 +1539,8 @@
 end
 
 function wifinet.get_device(self)
-	if self.iwdata.device then
-		return wifidev(self.iwdata.device)
-	end
+	local dev = self:ubus("radio") or self:get("device")
+	return dev and wifidev(dev) or nil
 end
 
 function wifinet.is_up(self)
@@ -1421,7 +1549,7 @@
 end
 
 function wifinet.active_mode(self)
-	local m = _stror(self.iwdata.mode, self.iwinfo.mode) or "ap"
+	local m = self.iwinfo.mode or self:ubus("net", "config", "mode") or self:get("mode") or "ap"
 
 	if     m == "ap"      then m = "Master"
 	elseif m == "sta"     then m = "Client"
@@ -1438,11 +1566,11 @@
 end
 
 function wifinet.active_ssid(self)
-	return _stror(self.iwdata.ssid, self.iwinfo.ssid)
+	return self.iwinfo.ssid or self:ubus("net", "config", "ssid") or self:get("ssid")
 end
 
 function wifinet.active_bssid(self)
-	return _stror(self.iwdata.bssid, self.iwinfo.bssid) or "00:00:00:00:00:00"
+	return self.iwinfo.bssid or self:ubus("net", "config", "bssid") or self:get("bssid")
 end
 
 function wifinet.active_encryption(self)
@@ -1469,8 +1597,8 @@
 end
 
 function wifinet.channel(self)
-	return self.iwinfo.channel or
-		tonumber(_uci_state:get("wireless", self.iwdata.device, "channel"))
+	return self.iwinfo.channel or self:ubus("dev", "config", "channel") or
+		tonumber(self:get("channel"))
 end
 
 function wifinet.signal(self)
@@ -1482,7 +1610,7 @@
 end
 
 function wifinet.country(self)
-	return self.iwinfo.country or "00"
+	return self.iwinfo.country or self:ubus("dev", "config", "country") or "00"
 end
 
 function wifinet.txpower(self)
@@ -1524,7 +1652,7 @@
 function wifinet.shortname(self)
 	return "%s %q" %{
 		lng.translate(self:active_mode()),
-		self:active_ssid() or self:active_bssid()
+		self:active_ssid() or self:active_bssid() or self:id()
 	}
 end
 
@@ -1532,7 +1660,7 @@
 	return "%s: %s %q (%s)" %{
 		lng.translate("Wireless Network"),
 		lng.translate(self:active_mode()),
-		self:active_ssid() or self:active_bssid(),
+		self:active_ssid() or self:active_bssid() or self:id(),
 		self:ifname()
 	}
 end
@@ -1548,8 +1676,8 @@
 function wifinet.get_networks(self)
 	local nets = { }
 	local net
-	for net in utl.imatch(tostring(self.iwdata.network)) do
-		if _uci_real:get("network", net) == "interface" then
+	for net in utl.imatch(self:ubus("net", "config", "network") or self:get("network")) do
+		if _uci:get("network", net) == "interface" then
 			nets[#nets+1] = network(net)
 		end
 	end
--- a/feeds/luci/modules/luci-mod-admin-full/luasrc/controller/admin/network.lua
+++ b/feeds/luci/modules/luci-mod-admin-full/luasrc/controller/admin/network.lua
@@ -1,5 +1,5 @@
 -- Copyright 2008 Steven Barth <steven@midlink.org>
--- Copyright 2011 Jo-Philipp Wich <jow@openwrt.org>
+-- Copyright 2011-2015 Jo-Philipp Wich <jow@openwrt.org>
 -- Licensed to the public under the Apache License 2.0.
 
 module("luci.controller.admin.network", package.seeall)
@@ -61,7 +61,7 @@
 			page = entry({"admin", "network", "wireless_shutdown"}, call("wifi_shutdown"), nil)
 			page.leaf = true
 
-			page = entry({"admin", "network", "wireless"}, arcombine(template("admin_network/wifi_overview"), cbi("admin_network/wifi")), _("Wifi"), 15)
+			page = entry({"admin", "network", "wireless"}, arcombine(template("admin_network/wifi_overview"), cbi("admin_network/wifi")), _("Wireless"), 15)
 			page.leaf = true
 			page.subindex = true
 
@@ -156,26 +156,15 @@
 end
 
 function wifi_join()
-	local function param(x)
-		return luci.http.formvalue(x)
-	end
-
-	local function ptable(x)
-		x = param(x)
-		return x and (type(x) ~= "table" and { x } or x) or {}
-	end
-
-	local dev  = param("device")
-	local ssid = param("join")
+	local tpl  = require "luci.template"
+	local http = require "luci.http"
+	local dev  = http.formvalue("device")
+	local ssid = http.formvalue("join")
 
 	if dev and ssid then
-		local cancel  = (param("cancel") or param("cbi.cancel")) and true or false
-
-		if cancel then
-			luci.http.redirect(luci.dispatcher.build_url("admin/network/wireless_join?device=" .. dev))
-		else
+		local cancel = (http.formvalue("cancel") or http.formvalue("cbi.cancel"))
+		if not cancel then
 			local cbi = require "luci.cbi"
-			local tpl = require "luci.template"
 			local map = luci.cbi.load("admin_network/wifi_add")[1]
 
 			if map:parse() ~= cbi.FORM_DONE then
@@ -183,10 +172,12 @@
 				map:render()
 				tpl.render("footer")
 			end
+
+			return
 		end
-	else
-		luci.template.render("admin_network/wifi_join")
 	end
+
+	tpl.render("admin_network/wifi_join")
 end
 
 function wifi_add()
@@ -244,7 +235,10 @@
 				proto      = net:proto(),
 				uptime     = net:uptime(),
 				gwaddr     = net:gwaddr(),
+				ipaddrs    = net:ipaddrs(),
+				ip6addrs   = net:ip6addrs(),
 				dnsaddrs   = net:dnsaddrs(),
+				ip6prefix  = net:ip6prefix(),
 				name       = device:shortname(),
 				type       = device:type(),
 				ifname     = device:name(),
@@ -255,29 +249,9 @@
 				rx_packets = device:rx_packets(),
 				tx_packets = device:tx_packets(),
 
-				ipaddrs    = { },
-				ip6addrs   = { },
 				subdevices = { }
 			}
 
-			local _, a
-			for _, a in ipairs(device:ipaddrs()) do
-				data.ipaddrs[#data.ipaddrs+1] = {
-					addr      = a:host():string(),
-					netmask   = a:mask():string(),
-					prefix    = a:prefix()
-				}
-			end
-			for _, a in ipairs(device:ip6addrs()) do
-				if not a:is6linklocal() then
-					data.ip6addrs[#data.ip6addrs+1] = {
-						addr      = a:host():string(),
-						netmask   = a:mask():string(),
-						prefix    = a:prefix()
-					}
-				end
-			end
-
 			for _, device in ipairs(net:get_interfaces() or {}) do
 				data.subdevices[#data.subdevices+1] = {
 					name       = device:shortname(),
--- a/feeds/luci/modules/luci-mod-admin-full/luasrc/view/admin_network/iface_overview.htm
+++ b/feeds/luci/modules/luci-mod-admin-full/luasrc/view/admin_network/iface_overview.htm
@@ -49,7 +49,7 @@
 			s.innerHTML = '<%:Waiting for changes to be applied...%>';
 		}
 
-		XHR.get('<%=luci.dispatcher.build_url("admin", "network")%>/iface_' + (reconnect ? 'reconnect' : 'shutdown') + '/' + id, null,
+		(new XHR()).post('<%=luci.dispatcher.build_url("admin", "network")%>/iface_' + (reconnect ? 'reconnect' : 'shutdown') + '/' + id, { token: '<%=token%>' },
 			function(x)
 			{
 				if (s)
@@ -66,12 +66,22 @@
 		);
 	}
 
+	function iface_delete(id) {
+		if (!confirm('<%:Really delete this interface? The deletion cannot be undone!\nYou might lose access to this device if you are connected via this interface.%>'))
+			return;
+
+		(new XHR()).post('<%=luci.dispatcher.build_url("admin", "network", "iface_delete")%>/' + id, { token: '<%=token%>' },
+			function(x) {
+				location.href = '<%=luci.dispatcher.build_url("admin", "network", "network")%>';
+			}
+		);
+	}
 
 	var iwxhr = new XHR();
 	var wifidevs = <%=luci.http.write_json(netdevs)%>;
 	var arptable = <%=luci.http.write_json(arpcache)%>;
 
-	XHR.poll(5, '<%=luci.dispatcher.build_url("admin", "network", "iface_status", table.concat(ifaces, ","))%>', null,
+	XHR.poll(5, '<%=luci.dispatcher.build_url("admin", "network", "iface_status", table.concat(ifaces, ","))%>', null,
 		function(x, ifcs)
 		{
 			if (ifcs)
@@ -125,7 +135,7 @@
 							html += String.format('<strong><%:Uptime%>:</strong> %t<br />', ifc.uptime);
 						}
 
-						if (ifc.type != 'tunnel')
+						if (ifc.macaddr)
 						{
 							html += String.format('<strong><%:MAC-Address%>:</strong> %s<br />', ifc.macaddr);
 						}
@@ -141,9 +151,8 @@
 						{
 							for (var i = 0; i < ifc.ipaddrs.length; i++)
 								html += String.format(
-									'<strong><%:IPv4%>:</strong> %s/%d<br />',
-									ifc.ipaddrs[i].addr,
-									ifc.ipaddrs[i].prefix
+									'<strong><%:IPv4%>:</strong> %s<br />',
+									ifc.ipaddrs[i]
 								);
 						}
 
@@ -151,11 +160,15 @@
 						{
 							for (var i = 0; i < ifc.ip6addrs.length; i++)
 								html += String.format(
-									'<strong><%:IPv6%>:</strong> %s/%d<br />',
-									ifc.ip6addrs[i].addr,
-									ifc.ip6addrs[i].prefix
+									'<strong><%:IPv6%>:</strong> %s<br />',
+									ifc.ip6addrs[i]
 								);
 						}
+						
+						if (ifc.ip6prefix)
+						{
+							html += String.format('<strong><%:IPv6-PD%>:</strong> %s<br />', ifc.ip6prefix);
+						}
 
 						d.innerHTML = html;
 					}
@@ -168,14 +181,14 @@
 						d.innerHTML = String.format(
 							'<em><%:Unsupported protocol type.%></em><br />' +
 							'<a href="%h"><%:Install protocol extensions...%></a>',
-								'<%=luci.dispatcher.build_url("admin/system/packages")%>?query=luci-proto&display=available'
+								'<%=luci.dispatcher.build_url("admin/system/packages")%>?query=luci-proto&display=available'
 						);
 					}
 					else if (d && !ifc.ifname)
 					{
 						d.innerHTML = String.format(
 							'<em><%:Network without interfaces.%></em><br />' +
-							'<a href="<%=luci.dispatcher.build_url("admin/network/network/%s")%>?tab.network.%s=physical"><%:Assign interfaces...%></a>',
+							'<a href="<%=luci.dispatcher.build_url("admin/network/network/%s")%>?tab.network.%s=physical"><%:Assign interfaces...%></a>',
 								ifc.name, ifc.name
 						);
 					}
@@ -229,13 +242,13 @@
 					<td style="width:420px">
 						<input type="button" class="cbi-button cbi-button-reload" style="width:100px" onclick="iface_shutdown('<%=net[1]%>', true)" title="<%:Reconnect this interface%>" value="<%:Connect%>" />
 						<input type="button" class="cbi-button cbi-button-reset" style="width:100px" onclick="iface_shutdown('<%=net[1]%>', false)" title="<%:Shutdown this interface%>" value="<%:Stop%>" />
-						<input type="button" class="cbi-button cbi-button-edit" style="width:100px" onclick="location.href='<%=luci.dispatcher.build_url("admin/network/network", net[1])%>'" title="<%:Edit this interface%>" value="<%:Edit%>" id="<%=net[1]%>-ifc-edit" />
-						<input type="button" class="cbi-button cbi-button-remove" style="width:100px" onclick="if (confirm('<%:Really delete this interface? The deletion cannot be undone!\nYou might lose access to this device if you are connected via this interface.%>')) location.href='<%=luci.dispatcher.build_url("admin/network/iface_delete", net[1])%>'" title="<%:Delete this interface%>" value="<%:Delete%>" />
+						<input type="button" class="cbi-button cbi-button-edit" style="width:100px" onclick="location.href='<%=luci.dispatcher.build_url("admin/network/network", net[1])%>'" title="<%:Edit this interface%>" value="<%:Edit%>" id="<%=net[1]%>-ifc-edit" />
+						<input type="button" class="cbi-button cbi-button-remove" style="width:100px" onclick="iface_delete('<%=net[1]%>')" value="<%:Delete%>" />
 					</td>
 				</tr>
 			<% end %>
 		</table>
 
-		<input type="button" class="cbi-button cbi-button-add" value="<%:Add new interface...%>" onclick="location.href='<%=luci.dispatcher.build_url("admin/network/iface_add")%>'" />
+		<input type="button" class="cbi-button cbi-button-add" value="<%:Add new interface...%>" onclick="location.href='<%=luci.dispatcher.build_url("admin/network/iface_add")%>'" />
 	</fieldset>
 </div>
--- a/feeds/luci/modules/luci-mod-admin-full/luasrc/view/admin_network/iface_status.htm
+++ b/feeds/luci/modules/luci-mod-admin-full/luasrc/view/admin_network/iface_status.htm
@@ -1,7 +1,7 @@
 <%+cbi/valueheader%>
 
 <script type="text/javascript">//<![CDATA[
-	XHR.poll(5, '<%=luci.dispatcher.build_url("admin", "network", "iface_status", self.network)%>', null,
+	XHR.poll(5, '<%=luci.dispatcher.build_url("admin", "network", "iface_status", self.network)%>', null,
 		function(x, ifc)
 		{
 			if (ifc && (ifc = ifc[0]))
@@ -25,7 +25,7 @@
 						html += String.format('<strong><%:Uptime%>:</strong> %t<br />', ifc.uptime);
 					}
 
-					if (ifc.type != 'tunnel')
+					if (ifc.macaddr)
 					{
 						html += String.format('<strong><%:MAC-Address%>:</strong> %s<br />', ifc.macaddr);
 					}
@@ -41,9 +41,8 @@
 					{
 						for (var i = 0; i < ifc.ipaddrs.length; i++)
 							html += String.format(
-								'<strong><%:IPv4%>:</strong> %s/%d<br />',
-								ifc.ipaddrs[i].addr,
-								ifc.ipaddrs[i].prefix
+								'<strong><%:IPv4%>:</strong> %s<br />',
+								ifc.ipaddrs[i]
 							);
 					}
 
@@ -51,11 +50,15 @@
 					{
 						for (var i = 0; i < ifc.ip6addrs.length; i++)
 							html += String.format(
-								'<strong><%:IPv6%>:</strong> %s/%d<br />',
-								ifc.ip6addrs[i].addr,
-								ifc.ip6addrs[i].prefix
+								'<strong><%:IPv6%>:</strong> %s<br />',
+								ifc.ip6addrs[i]
 							);
 					}
+					
+					if (ifc.ip6prefix)
+					{
+						html += String.format('<strong><%:IPv6-PD%>:</strong> %s<br />', ifc.ip6prefix);
+					}
 
 					d.innerHTML = html;
 				}
--- a/feeds/luci/modules/luci-mod-admin-full/luasrc/view/admin_status/index.htm
+++ b/feeds/luci/modules/luci-mod-admin-full/luasrc/view/admin_status/index.htm
@@ -76,12 +76,14 @@
 
 		if wan6 then
 			rv.wan6 = {
-				ip6addr = wan6:ip6addr(),
-				gw6addr = wan6:gw6addr(),
-				dns     = wan6:dns6addrs(),
-				uptime  = wan6:uptime(),
-				ifname  = wan6:ifname(),
-				link    = wan6:adminlink()
+				ip6addr   = wan6:ip6addr(),
+				gw6addr   = wan6:gw6addr(),
+				dns       = wan6:dns6addrs(),
+				ip6prefix = wan6:ip6prefix(),
+				uptime    = wan6:uptime(),
+				proto     = wan6:proto(),
+				ifname    = wan6:ifname(),
+				link      = wan6:adminlink()
 			}
 		end
 
@@ -97,6 +99,11 @@
 		luci.http.write_json(rv)
 
 		return
+	elseif luci.http.formvalue("hosts") == "1" then
+		luci.http.prepare_content("application/json")
+		luci.http.write_json(luci.sys.net.host_hints())
+
+		return
 	end
 -%>
 
@@ -121,12 +128,51 @@
 		);
 	}
 
-	var wifidevs = <%=luci.http.write_json(netdevs)%>;
-	var arptable = <%=luci.http.write_json(arpcache)%>;
+	function wifirate(bss, rx) {
+		var p = rx ? 'rx_' : 'tx_',
+		    s = '%.1f <%:Mbit/s%>, %d<%:MHz%>'
+					.format(bss[p+'rate'] / 1000, bss[p+'mhz']),
+		    ht = bss[p+'ht'], vht = bss[p+'vht'],
+			mhz = bss[p+'mhz'], nss = bss[p+'nss'],
+			mcs = bss[p+'mcs'], sgi = bss[p+'short_gi'];
+
+		if (ht || vht) {
+			if (vht) s += ', VHT-MCS %d'.format(mcs);
+			if (nss) s += ', VHT-NSS %d'.format(nss);
+			if (ht)  s += ', MCS %s'.format(mcs);
+			if (sgi) s += ', <%:Short GI%>';
+		}
+
+		return s;
+	}
+
+	function duid2mac(duid) {
+		// DUID-LLT / Ethernet
+		if (duid.length === 28 && duid.substr(0, 8) === '00010001')
+			return duid.substr(16).replace(/(..)(?=..)/g, '$1:').toUpperCase();
+
+		// DUID-LL / Ethernet
+		if (duid.length === 24 && duid.substr(0, 8) === '00030001')
+			return duid.substr(8).replace(/(..)(?=..)/g, '$1:').toUpperCase();
+
+		return null;
+	}
+
+	var npoll = 1;
+	var hosts = <%=luci.http.write_json(luci.sys.net.host_hints())%>;
+
+	function updateHosts() {
+		XHR.get('<%=REQUEST_URI%>', { hosts: 1 }, function(x, data) {
+			hosts = data;
+		});
+	}
 
 	XHR.poll(5, '<%=REQUEST_URI%>', { status: 1 },
 		function(x, info)
 		{
+			if (!(npoll++ % 5))
+				updateHosts();
+
 			var si = document.getElementById('wan4_i');
 			var ss = document.getElementById('wan4_s');
 			var ifc = info.wan;
@@ -189,9 +235,34 @@
 			if (ifc6 && ifc6.ifname && ifc6.proto != 'none')
 			{
 				var s = String.format(
-					'<strong><%:Address%>: </strong>%s<br />' +
+					'<strong><%:Type%>: </strong>%s%s<br />',
+						ifc6.proto, (ifc6.ip6prefix) ? '-pd' : ''
+				);
+				
+				if (!ifc6.ip6prefix)
+				{
+					s += String.format(
+						'<strong><%:Address%>: </strong>%s<br />',
+						(ifc6.ip6addr) ? ifc6.ip6addr : '::'
+					);
+				}
+				else
+				{
+					s += String.format(
+						'<strong><%:Prefix Delegated%>: </strong>%s<br />',
+						ifc6.ip6prefix
+					);
+					if (ifc6.ip6addr)
+					{
+						s += String.format(
+							'<strong><%:Address%>: </strong>%s<br />',
+							ifc6.ip6addr
+						);
+					}
+				}
+
+				s += String.format(
 					'<strong><%:Gateway%>: </strong>%s<br />',
-						(ifc6.ip6addr) ? ifc6.ip6addr : '::',
 						(ifc6.gw6addr) ? ifc6.gw6addr : '::'
 				);
 
@@ -232,20 +303,56 @@
 				var s = String.format(
 					'<strong><%:Status%>: </strong>%s<br />' +
 					'<strong><%:Line State%>: </strong>%s [0x%x]<br />' +
-					'<strong><%:Line Speed%>: </strong>%s/s / %s/s<br />' +
-					'<strong><%:Line Attenuation%>: </strong>%s dB / %s dB<br />' +
-					'<strong><%:Noise Margin%>: </strong>%s dB / %s dB<br />',
+					'<strong><%:Line Mode%>: </strong>%s<br />' +
+					'<strong><%:Annex%>: </strong>%s<br />' +
+					'<strong><%:Profile%>: </strong>%s<br />' +
+					'<strong><%:Data Rate%>: </strong>%s/s / %s/s<br />' +
+					'<strong><%:Max. Attainable Data Rate (ATTNDR)%>: </strong>%s/s / %s/s<br />' +
+					'<strong><%:Latency%>: </strong>%s / %s<br />' +
+					'<strong><%:Line Attenuation (LATN)%>: </strong>%s dB / %s dB<br />' +
+					'<strong><%:Signal Attenuation (SATN)%>: </strong>%s dB / %s dB<br />' +
+					'<strong><%:Noise Margin (SNR)%>: </strong>%s dB / %s dB<br />' +
+					'<strong><%:Aggregate Transmit Power(ACTATP)%>: </strong>%s dB / %s dB<br />' +
+					'<strong><%:Forward Error Correction Seconds (FECS)%>: </strong>%s / %s<br />' +
+					'<strong><%:Errored seconds (ES)%>: </strong>%s / %s<br />' +
+					'<strong><%:Severely Errored Seconds (SES)%>: </strong>%s / %s<br />' +
+					'<strong><%:Loss of Signal Seconds (LOSS)%>: </strong>%s / %s<br />' +
+					'<strong><%:Unavailable Seconds (UAS)%>: </strong>%s / %s<br />' +
+					'<strong><%:Header Error Code Errors (HEC)%>: </strong>%s / %s<br />' +
+					'<strong><%:Non Pre-emtive CRC errors (CRC_P)%>: </strong>%s / %s<br />' +
+					'<strong><%:Pre-emtive CRC errors (CRCP_P)%>: </strong>%s / %s<br />' +
+					'<strong><%:Line Uptime%>: </strong>%s<br />' +
+					'<strong><%:ATU-C System Vendor ID%>: </strong>%s<br />' +
+					'<strong><%:Power Management Mode%>: </strong>%s<br />',
 						info.dsl.line_state, info.dsl.line_state_detail,
 						info.dsl.line_state_num,
+						info.dsl.line_mode_s,
+						info.dsl.annex_s,
+						info.dsl.profile_s,
 						info.dsl.data_rate_down_s, info.dsl.data_rate_up_s,
+						info.dsl.max_data_rate_down_s, info.dsl.max_data_rate_up_s,
+						info.dsl.latency_num_down, info.dsl.latency_num_up,
 						info.dsl.line_attenuation_down, info.dsl.line_attenuation_up,
-						info.dsl.noise_margin_down, info.dsl.noise_margin_up
+						info.dsl.signal_attenuation_down, info.dsl.signal_attenuation_up,
+						info.dsl.noise_margin_down, info.dsl.noise_margin_up,
+						info.dsl.actatp_down, info.dsl.actatp_up,
+						info.dsl.errors_fec_near, info.dsl.errors_fec_far,
+						info.dsl.errors_es_near, info.dsl.errors_es_far,
+						info.dsl.errors_ses_near, info.dsl.errors_ses_far,
+						info.dsl.errors_loss_near, info.dsl.errors_loss_far,
+						info.dsl.errors_uas_near, info.dsl.errors_uas_far,
+						info.dsl.errors_hec_near, info.dsl.errors_hec_far,
+						info.dsl.errors_crc_p_near, info.dsl.errors_crc_p_far,
+						info.dsl.errors_crcp_p_near, info.dsl.errors_crcp_p_far,
+						info.dsl.line_uptime_s,
+						info.dsl.atuc_vendor_id,
+						info.dsl.power_mode_s
 				);
 
 				dsl_s.innerHTML = String.format('<small>%s</small>', s);
 				dsl_i.innerHTML = String.format(
 					'<img src="<%=resource%>/icons/ethernet.png" />' +
-					'<br /><small>xDSL</small>'
+					'<br /><small>DSL</small>'
 				);
 			<% end %>
 
@@ -261,7 +368,9 @@
 				{
 					var timestr;
 
-					if (info.leases[i].expires <= 0)
+					if (info.leases[i].expires === false)
+						timestr = '<em><%:unlimited%></em>';
+					else if (info.leases[i].expires <= 0)
 						timestr = '<em><%:expired%></em>';
 					else
 						timestr = String.format('%t', info.leases[i].expires);
@@ -299,7 +408,9 @@
 				{
 					var timestr;
 
-					if (info.leases6[i].expires <= 0)
+					if (info.leases6[i].expires === false)
+						timestr = '<em><%:unlimited%></em>';
+					else if (info.leases6[i].expires <= 0)
 						timestr = '<em><%:expired%></em>';
 					else
 						timestr = String.format('%t', info.leases6[i].expires);
@@ -307,7 +418,17 @@
 					var tr = ls6.rows[0].parentNode.insertRow(-1);
 						tr.className = 'cbi-section-table-row cbi-rowstyle-' + ((i % 2) + 1);
 
-					tr.insertCell(-1).innerHTML = info.leases6[i].hostname ? info.leases6[i].hostname : '?';
+					var host = hosts[duid2mac(info.leases6[i].duid)];
+					if (host)
+						tr.insertCell(-1).innerHTML = String.format(
+							'<div style="max-width:200px;overflow:hidden;text-overflow:ellipsis">%s</div>',
+							((host.name && (host.ipv4 || host.ipv6))
+								? '%h (%s)'.format(host.name, host.ipv4 || host.ipv6)
+								: '%h'.format(host.name || host.ipv4 || host.ipv6)).nobr()
+						);
+					else
+						tr.insertCell(-1).innerHTML = info.leases6[i].hostname ? info.leases6[i].hostname : '?';
+
 					tr.insertCell(-1).innerHTML = info.leases6[i].ip6addr;
 					tr.insertCell(-1).innerHTML = info.leases6[i].duid;
 					tr.insertCell(-1).innerHTML = timestr;
@@ -381,7 +502,7 @@
 								'<strong><%:Bitrate%>:</strong> %s <%:Mbit/s%><br />',
 								icon, net.signal, net.noise,
 								net.quality,
-								net.link, net.ssid,
+								net.link, net.ssid || '?',
 								net.mode,
 								net.channel, net.frequency,
 								net.bitrate || '?'
@@ -392,7 +513,7 @@
 							s += String.format(
 								'<strong><%:BSSID%>:</strong> %s<br />' +
 								'<strong><%:Encryption%>:</strong> %s',
-									net.bssid,
+									net.bssid || '?',
 									net.encryption
 							);
 						}
@@ -405,19 +526,15 @@
 
 						for (var bssid in net.assoclist)
 						{
-							assoclist.push({
-								bssid:    bssid,
-								signal:   net.assoclist[bssid].signal,
-								noise:    net.assoclist[bssid].noise,
-								rx_rate:  net.assoclist[bssid].rx_rate,
-								rx_mcs:   net.assoclist[bssid].rx_mcs,
-								rx_40mhz: net.assoclist[bssid].rx_40mhz,
-								tx_rate:  net.assoclist[bssid].tx_rate,
-								tx_mcs:   net.assoclist[bssid].tx_mcs,
-								tx_40mhz: net.assoclist[bssid].tx_40mhz,
-								link:     net.link,
-								name:     net.name
-							});
+							var bss = net.assoclist[bssid];
+
+							bss.bssid  = bssid;
+							bss.link   = net.link;
+							bss.name   = net.name;
+							bss.ifname = net.ifname;
+							bss.radio  = dev.name;
+
+							assoclist.push(bss);
 						}
 					}
 
@@ -461,30 +578,37 @@
 						icon = "<%=resource%>/icons/signal-75-100.png";
 
 					tr.insertCell(-1).innerHTML = String.format(
-						'<img src="%s" title="<%:Signal%>: %d <%:dBm%> / <%:Noise%>: %d <%:dBm%>" />',
-						icon, assoclist[i].signal, assoclist[i].noise
+						'<span class="ifacebadge" title="%q"><img src="<%=resource%>/icons/wifi.png" /> %h</span>',
+						assoclist[i].radio, assoclist[i].ifname
 					);
 
-					tr.insertCell(-1).innerHTML = assoclist[i].bssid;
-
 					tr.insertCell(-1).innerHTML = String.format(
 						'<a href="%s">%s</a>',
 							assoclist[i].link,
 							'%h'.format(assoclist[i].name).nobr()
 					);
 
-					tr.insertCell(-1).innerHTML = String.format('%d <%:dBm%>', assoclist[i].signal).nobr();
-					tr.insertCell(-1).innerHTML = String.format('%d <%:dBm%>', assoclist[i].noise).nobr();
+					tr.insertCell(-1).innerHTML = assoclist[i].bssid;
 
-					tr.insertCell(-1).innerHTML = (assoclist[i].rx_mcs > -1)
-						? String.format('%.1f <%:Mbit/s%>, MCS %d, %d<%:MHz%>', assoclist[i].rx_rate / 1000, assoclist[i].rx_mcs, assoclist[i].rx_40mhz ? 40 : 20).nobr()
-						: String.format('%.1f <%:Mbit/s%>', assoclist[i].rx_rate / 1000).nobr()
-					;
+					var host = hosts[assoclist[i].bssid];
+					if (host)
+						tr.insertCell(-1).innerHTML = String.format(
+							'<div style="max-width:200px;overflow:hidden;text-overflow:ellipsis">%s</div>',
+							((host.name && (host.ipv4 || host.ipv6))
+								? '%h (%s)'.format(host.name, host.ipv4 || host.ipv6)
+								: '%h'.format(host.name || host.ipv4 || host.ipv6)).nobr()
+						);
+					else
+						tr.insertCell(-1).innerHTML = '?';
 
-					tr.insertCell(-1).innerHTML = (assoclist[i].tx_mcs > -1)
-						? String.format('%.1f <%:Mbit/s%>, MCS %d, %d<%:MHz%>', assoclist[i].tx_rate / 1000, assoclist[i].tx_mcs, assoclist[i].tx_40mhz ? 40 : 20).nobr()
-						: String.format('%.1f <%:Mbit/s%>', assoclist[i].tx_rate / 1000).nobr()
-					;
+					tr.insertCell(-1).innerHTML = String.format(
+						'<span class="ifacebadge" title="<%:Signal%>: %d <%:dBm%> / <%:Noise%>: %d <%:dBm%> / <%:SNR%>: %d"><img src="%s" /> %d / %d <%:dBm%></span>',
+						assoclist[i].signal, assoclist[i].noise, assoclist[i].signal - assoclist[i].noise,
+						icon,
+						assoclist[i].signal, assoclist[i].noise
+					);
+
+					tr.insertCell(-1).innerHTML = wifirate(assoclist[i], true).nobr() + '<br />' + wifirate(assoclist[i], false).nobr();
 				}
 
 				if (ac.rows.length == 1)
@@ -552,7 +676,7 @@
 	);
 //]]></script>
 
-<h2><a id="content" name="content"><%:Status%></a></h2>
+<h2 name="content"><%:Status%></h2>
 
 <fieldset class="cbi-section">
 	<legend><%:System%></legend>
@@ -636,7 +760,7 @@
 
 	<table class="cbi-section-table" id="lease6_status_table">
 		<tr class="cbi-section-table-titles">
-			<th class="cbi-section-table-cell"><%:Hostname%></th>
+			<th class="cbi-section-table-cell"><%:Host%></th>
 			<th class="cbi-section-table-cell"><%:IPv6-Address%></th>
 			<th class="cbi-section-table-cell"><%:DUID%></th>
 			<th class="cbi-section-table-cell"><%:Leasetime remaining%></th>
@@ -650,9 +774,9 @@
 
 <% if has_dsl then %>
 <fieldset class="cbi-section">
-       <legend><%:xDSL%></legend>
+       <legend><%:DSL%></legend>
        <table width="100%" cellspacing="10">
-               <tr><td width="33%" style="vertical-align:top"><%:xDSL Status%></td><td>
+               <tr><td width="33%" style="vertical-align:top"><%:DSL Status%></td><td>
                        <table><tr>
                                <td id="dsl_i" style="width:16px; text-align:center; padding:3px"><img src="<%=resource%>/icons/ethernet_disabled.png" /><br /><small>?</small></td>
                                <td id="dsl_s" style="vertical-align:middle; padding: 3px"><em><%:Collecting data...%></em></td>
@@ -674,18 +798,17 @@
 <fieldset class="cbi-section">
 	<legend><%:Associated Stations%></legend>
 
-	<table class="cbi-section-table" id="wifi_assoc_table">
+	<table class="cbi-section-table valign-middle" id="wifi_assoc_table">
 		<tr class="cbi-section-table-titles">
 			<th class="cbi-section-table-cell">&#160;</th>
-			<th class="cbi-section-table-cell"><%:MAC-Address%></th>
 			<th class="cbi-section-table-cell"><%:Network%></th>
-			<th class="cbi-section-table-cell"><%:Signal%></th>
-			<th class="cbi-section-table-cell"><%:Noise%></th>
-			<th class="cbi-section-table-cell"><%:RX Rate%></th>
-			<th class="cbi-section-table-cell"><%:TX Rate%></th>
+			<th class="cbi-section-table-cell"><%:MAC-Address%></th>
+			<th class="cbi-section-table-cell"><%:Host%></th>
+			<th class="cbi-section-table-cell"><%:Signal%> / <%:Noise%></th>
+			<th class="cbi-section-table-cell"><%:RX Rate%> / <%:TX Rate%></th>
 		</tr>
 		<tr class="cbi-section-table-row">
-			<td colspan="7"><em><br /><%:Collecting data...%></em></td>
+			<td colspan="6"><em><br /><%:Collecting data...%></em></td>
 		</tr>
 	</table>
 </fieldset>
--- a/feeds/luci/modules/luci-base/luasrc/sys.lua
+++ b/feeds/luci/modules/luci-base/luasrc/sys.lua
@@ -310,6 +310,28 @@
 	end
 end
 
+function net.host_hints(callback)
+	if callback then
+		_nethints(1, function(mac, v4, v6, name)
+			if mac and mac ~= "00:00:00:00:00:00" and (v4 or v6 or name) then
+				callback(mac, v4, v6, name)
+			end
+		end)
+	else
+		local rv = { }
+		_nethints(1, function(mac, v4, v6, name)
+			if mac and mac ~= "00:00:00:00:00:00" and (v4 or v6 or name) then
+				local e = { }
+				if v4   then e.ipv4 = v4   end
+				if v6   then e.ipv6 = v6   end
+				if name then e.name = name end
+				rv[mac] = e
+			end
+		end)
+		return rv
+	end
+end
+
 function net.conntrack(callback)
 	local connt = {}
 	if fs.access("/proc/net/nf_conntrack", "r") then
